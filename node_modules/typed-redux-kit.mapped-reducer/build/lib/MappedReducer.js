import { getActionTypes } from './util';
export class MappedReducer {
    /**
     * Instantiate MappedReducer
     *
     * The only option is initialState for now.
     *
     * @param {MappedReducerOptions<STATE>} [opts={}]
     * @memberof MappedReducer
     */
    constructor(opts = {}) {
        this.reducerMap = new Map();
        /**
         * Set a subreducer for the given action type(s)
         *
         * It takes a single action type and array/string enum of action types
         *
         * @memberof MappedReducer
         */
        this.set = (actionTypeOrActionTypes, reducer) => {
            const actionTypes = getActionTypes(actionTypeOrActionTypes);
            actionTypes.forEach((actionType) => {
                this.reducerMap.set(actionType, reducer);
            });
            return this;
        };
        /**
         * Delete a subreducer for the given action type(s)
         *
         * It takes a single action type and array/string enum of action types
         *
         * @memberof MappedReducer
         */
        this.delete = (actionTypeOrActionTypes) => {
            const actionTypes = getActionTypes(actionTypeOrActionTypes);
            actionTypes.forEach((actionType) => {
                this.reducerMap.delete(actionType);
            });
            return this;
        };
        this.get = (actionType) => this.reducerMap.get(actionType);
        this.reduce = (state = this.initialState, action) => {
            if (!this.reducerMap.has(action.type))
                return state;
            return this.reducerMap.get(action.type)(state, action);
        };
        this.initialState = opts.initialState;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwcGVkUmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvTWFwcGVkUmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBRXZDLE1BQU07SUFLSjs7Ozs7OztPQU9HO0lBQ0gsWUFBWSxPQUFvQyxFQUFFO1FBVjFDLGVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBdUMsQ0FBQTtRQWNuRTs7Ozs7O1dBTUc7UUFDSSxRQUFHLEdBQUcsQ0FDWCx1QkFBOEksRUFDOUksT0FBc0M7WUFFdEMsTUFBTSxXQUFXLEdBQXlCLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO1lBQ2pGLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVO2dCQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUE7WUFDMUMsQ0FBQyxDQUFDLENBQUE7WUFDRixNQUFNLENBQUMsSUFBSSxDQUFBO1FBQ2IsQ0FBQyxDQUFBO1FBRUQ7Ozs7OztXQU1HO1FBQ0ksV0FBTSxHQUFHLENBQ2QsdUJBQThJO1lBRTlJLE1BQU0sV0FBVyxHQUF5QixjQUFjLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtZQUNqRixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVTtnQkFDN0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDcEMsQ0FBQyxDQUFDLENBQUE7WUFDRixNQUFNLENBQUMsSUFBSSxDQUFBO1FBQ2IsQ0FBQyxDQUFBO1FBRU0sUUFBRyxHQUFHLENBQXlDLFVBQThCLEtBQUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7UUFFakgsV0FBTSxHQUFHLENBQUMsUUFBZSxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQWM7WUFDL0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQTtZQUNuRCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN4RCxDQUFDLENBQUE7UUEzQ0MsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFBO0lBQ3ZDLENBQUM7Q0EyQ0YifQ==