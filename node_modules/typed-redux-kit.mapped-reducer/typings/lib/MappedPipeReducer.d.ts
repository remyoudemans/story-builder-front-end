import { Action } from 'redux';
import { MappedReducerOptions, Reducer } from './types';
export declare class MappedPipeReducer<STATE, ACTION_TYPE = any, ACTION extends Action = Action> {
    private initialState;
    private reducerMap;
    constructor(opts?: MappedReducerOptions<STATE>);
    /**
     * Append reducer functions for the given key
     */
    unshift: <SETTED_ACTION extends ACTION, SETTED_ACTION_TYPE extends SETTED_ACTION["type"] & ACTION_TYPE>(actionTypeOrActionTypes: SETTED_ACTION_TYPE | {
        [key: number]: SETTED_ACTION_TYPE;
    } | {
        [key: string]: SETTED_ACTION_TYPE;
    } | SETTED_ACTION_TYPE[], reducerOrReducers: Reducer<STATE, SETTED_ACTION> | Reducer<STATE, SETTED_ACTION>[]) => this;
    prepend: <SETTED_ACTION extends ACTION, SETTED_ACTION_TYPE extends SETTED_ACTION["type"] & ACTION_TYPE>(actionTypeOrActionTypes: SETTED_ACTION_TYPE | {
        [key: number]: SETTED_ACTION_TYPE;
    } | {
        [key: string]: SETTED_ACTION_TYPE;
    } | SETTED_ACTION_TYPE[], reducerOrReducers: Reducer<STATE, SETTED_ACTION> | Reducer<STATE, SETTED_ACTION>[]) => this;
    /**
     * Append reducer functions for the given key
     */
    push: <SETTED_ACTION extends ACTION, SETTED_ACTION_TYPE extends SETTED_ACTION["type"] & ACTION_TYPE>(actionTypeOrActionTypes: SETTED_ACTION_TYPE | {
        [key: number]: SETTED_ACTION_TYPE;
    } | {
        [key: string]: SETTED_ACTION_TYPE;
    } | SETTED_ACTION_TYPE[], reducerOrReducers: Reducer<STATE, SETTED_ACTION> | Reducer<STATE, SETTED_ACTION>[]) => this;
    append: <SETTED_ACTION extends ACTION, SETTED_ACTION_TYPE extends SETTED_ACTION["type"] & ACTION_TYPE>(actionTypeOrActionTypes: SETTED_ACTION_TYPE | {
        [key: number]: SETTED_ACTION_TYPE;
    } | {
        [key: string]: SETTED_ACTION_TYPE;
    } | SETTED_ACTION_TYPE[], reducerOrReducers: Reducer<STATE, SETTED_ACTION> | Reducer<STATE, SETTED_ACTION>[]) => this;
    /**
     * Replace reducer functions for the given key
     */
    set: <SETTED_ACTION extends ACTION, SETTED_ACTION_TYPE extends SETTED_ACTION["type"] & ACTION_TYPE>(actionTypeOrActionTypes: SETTED_ACTION_TYPE | {
        [key: number]: SETTED_ACTION_TYPE;
    } | {
        [key: string]: SETTED_ACTION_TYPE;
    } | SETTED_ACTION_TYPE[], reducerOrReducers: Reducer<STATE, SETTED_ACTION> | Reducer<STATE, SETTED_ACTION>[]) => this;
    /**
     * Replace reducer functions for the given key
     */
    delete: <SETTED_ACTION extends ACTION, SETTED_ACTION_TYPE extends SETTED_ACTION["type"] & ACTION_TYPE>(actionTypeOrActionTypes: SETTED_ACTION_TYPE | {
        [key: number]: SETTED_ACTION_TYPE;
    } | {
        [key: string]: SETTED_ACTION_TYPE;
    } | SETTED_ACTION_TYPE[]) => this;
    get: <SETTED_ACTION_TYPE extends ACTION_TYPE>(actionType: SETTED_ACTION_TYPE) => Reducer<STATE, Action>[];
    reduce: (state: STATE, action: ACTION) => STATE;
}
