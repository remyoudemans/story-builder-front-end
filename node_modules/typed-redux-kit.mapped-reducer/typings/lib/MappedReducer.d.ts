import { Action } from 'redux';
import { MappedReducerOptions, Reducer } from './types';
export declare class MappedReducer<STATE, ACTION_TYPE = any, ACTION extends Action = Action> {
    private initialState;
    private reducerMap;
    /**
     * Instantiate MappedReducer
     *
     * The only option is initialState for now.
     *
     * @param {MappedReducerOptions<STATE>} [opts={}]
     * @memberof MappedReducer
     */
    constructor(opts?: MappedReducerOptions<STATE>);
    /**
     * Set a subreducer for the given action type(s)
     *
     * It takes a single action type and array/string enum of action types
     *
     * @memberof MappedReducer
     */
    set: <SETTED_ACTION extends ACTION, SETTED_ACTION_TYPE extends SETTED_ACTION["type"] & ACTION_TYPE>(actionTypeOrActionTypes: SETTED_ACTION_TYPE | {
        [key: number]: SETTED_ACTION_TYPE;
    } | {
        [key: string]: SETTED_ACTION_TYPE;
    } | SETTED_ACTION_TYPE[], reducer: Reducer<STATE, SETTED_ACTION>) => this;
    /**
     * Delete a subreducer for the given action type(s)
     *
     * It takes a single action type and array/string enum of action types
     *
     * @memberof MappedReducer
     */
    delete: <SETTED_ACTION extends ACTION, SETTED_ACTION_TYPE extends SETTED_ACTION["type"] & ACTION_TYPE>(actionTypeOrActionTypes: SETTED_ACTION_TYPE | {
        [key: number]: SETTED_ACTION_TYPE;
    } | {
        [key: string]: SETTED_ACTION_TYPE;
    } | SETTED_ACTION_TYPE[]) => this;
    get: <SETTED_ACTION_TYPE extends ACTION_TYPE>(actionType: SETTED_ACTION_TYPE) => Reducer<STATE, Action>;
    reduce: (state: STATE, action: ACTION) => STATE;
}
