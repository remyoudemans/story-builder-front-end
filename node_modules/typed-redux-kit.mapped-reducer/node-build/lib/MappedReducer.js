"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
class MappedReducer {
    /**
     * Instantiate MappedReducer
     *
     * The only option is initialState for now.
     *
     * @param {MappedReducerOptions<STATE>} [opts={}]
     * @memberof MappedReducer
     */
    constructor(opts = {}) {
        this.reducerMap = new Map();
        /**
         * Set a subreducer for the given action type(s)
         *
         * It takes a single action type and array/string enum of action types
         *
         * @memberof MappedReducer
         */
        this.set = (actionTypeOrActionTypes, reducer) => {
            const actionTypes = util_1.getActionTypes(actionTypeOrActionTypes);
            actionTypes.forEach((actionType) => {
                this.reducerMap.set(actionType, reducer);
            });
            return this;
        };
        /**
         * Delete a subreducer for the given action type(s)
         *
         * It takes a single action type and array/string enum of action types
         *
         * @memberof MappedReducer
         */
        this.delete = (actionTypeOrActionTypes) => {
            const actionTypes = util_1.getActionTypes(actionTypeOrActionTypes);
            actionTypes.forEach((actionType) => {
                this.reducerMap.delete(actionType);
            });
            return this;
        };
        this.get = (actionType) => this.reducerMap.get(actionType);
        this.reduce = (state = this.initialState, action) => {
            if (!this.reducerMap.has(action.type))
                return state;
            return this.reducerMap.get(action.type)(state, action);
        };
        this.initialState = opts.initialState;
    }
}
exports.MappedReducer = MappedReducer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwcGVkUmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvTWFwcGVkUmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBLGlDQUF1QztBQUV2QztJQUtFOzs7Ozs7O09BT0c7SUFDSCxZQUFZLE9BQW9DLEVBQUU7UUFWMUMsZUFBVSxHQUFHLElBQUksR0FBRyxFQUF1QyxDQUFBO1FBY25FOzs7Ozs7V0FNRztRQUNJLFFBQUcsR0FBRyxDQUNYLHVCQUE4SSxFQUM5SSxPQUFzQztZQUV0QyxNQUFNLFdBQVcsR0FBeUIscUJBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO1lBQ2pGLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVO2dCQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUE7WUFDMUMsQ0FBQyxDQUFDLENBQUE7WUFDRixNQUFNLENBQUMsSUFBSSxDQUFBO1FBQ2IsQ0FBQyxDQUFBO1FBRUQ7Ozs7OztXQU1HO1FBQ0ksV0FBTSxHQUFHLENBQ2QsdUJBQThJO1lBRTlJLE1BQU0sV0FBVyxHQUF5QixxQkFBYyxDQUFDLHVCQUF1QixDQUFDLENBQUE7WUFDakYsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVU7Z0JBQzdCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1lBQ3BDLENBQUMsQ0FBQyxDQUFBO1lBQ0YsTUFBTSxDQUFDLElBQUksQ0FBQTtRQUNiLENBQUMsQ0FBQTtRQUVNLFFBQUcsR0FBRyxDQUF5QyxVQUE4QixLQUFLLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRWpILFdBQU0sR0FBRyxDQUFDLFFBQWUsSUFBSSxDQUFDLFlBQVksRUFBRSxNQUFjO1lBQy9ELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUE7WUFDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDeEQsQ0FBQyxDQUFBO1FBM0NDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQTtJQUN2QyxDQUFDO0NBMkNGO0FBMURELHNDQTBEQyJ9