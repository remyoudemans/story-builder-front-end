import { Trackable, isTrackable, setParentIfTrackable, initializeValue, } from './trackable';
import { resolveEntryFromIterable, getEntries, } from './util';
export const TrackableRecord = (defaultValue) => {
    class ExtendedTrackableRecord extends TrackableRecordClass {
        clone() {
            return new ExtendedTrackableRecord(Object.assign({}, defaultValue, this.internalObject));
        }
    }
    const keys = Object.keys(defaultValue);
    keys.forEach(key => {
        Object.defineProperty(ExtendedTrackableRecord.prototype, key, {
            set(newValue) {
                this.set(key, newValue);
            },
            get() {
                return this.get(key);
            },
        });
    });
    return (object) => {
        const record = new ExtendedTrackableRecord(Object.assign({}, defaultValue, object));
        return record;
    };
};
export class TrackableRecordClass extends Trackable {
    constructor(entryIterableOrObject) {
        super();
        if (entryIterableOrObject) {
            const entryIterable = resolveEntryFromIterable(entryIterableOrObject);
            this.internalObject = {};
            for (let [key, value] of entryIterable) {
                value = initializeValue(value, this);
                this.internalObject[key] = value;
            }
        }
        else {
            this.internalObject = {};
        }
    }
    [Symbol.iterator]() {
        const entries = getEntries(this.internalObject);
        return entries[Symbol.iterator]();
    }
    onChildChange(child) {
        this.markAsChanged();
    }
    get(key, defaultValue) {
        if (this.internalObject[key] === undefined)
            return defaultValue;
        return this.internalObject[key];
    }
    set(key, newValue) {
        const previousValue = this.internalObject[key];
        if (previousValue !== newValue) {
            this.markAsChanged();
            this.internalObject[key] = newValue;
            if (isTrackable(newValue)) {
                setParentIfTrackable(newValue, this);
            }
        }
        return this;
    }
    delete(key) {
        if (this.internalObject[key] !== undefined) {
            this.markAsChanged();
            this.internalObject[key] = undefined;
        }
        return this;
    }
    update(key, mutator) {
        const value = this.get(key);
        this.set(key, mutator(value));
        return this;
    }
    merge(partial) {
        const entries = resolveEntryFromIterable(partial);
        for (const [key, value] of entries) {
            this.set(key, value);
        }
        return this;
    }
    clone() {
        return new TrackableRecordClass(this.internalObject);
    }
    toJS(shallow = false) {
        const pureObject = {};
        for (const [key, value] of this) {
            pureObject[key] = !shallow && isTrackable(value)
                ? value.toJS()
                : value;
        }
        return pureObject;
    }
}
export default TrackableRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9yZWNvcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsb0JBQW9CLEVBQ3BCLGVBQWUsR0FDaEIsTUFBTSxhQUFhLENBQUE7QUFDcEIsT0FBTyxFQUNMLHdCQUF3QixFQUN4QixVQUFVLEdBQ1gsTUFBTSxRQUFRLENBQUE7QUFHZixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBZSxZQUFlO0lBQzNELDZCQUE4QixTQUFRLG9CQUF1QjtRQUNwRCxLQUFLO1lBQ1YsTUFBTSxDQUFDLElBQUksdUJBQXVCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBdUIsQ0FBQTtRQUNoSCxDQUFDO0tBQ0Y7SUFFRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRztRQUNkLE1BQU0sQ0FBQyxjQUFjLENBQUMsdUJBQXVCLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtZQUM1RCxHQUFHLENBQUUsUUFBUTtnQkFDWCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQTtZQUN6QixDQUFDO1lBQ0QsR0FBRztnQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUN0QixDQUFDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7SUFFRixNQUFNLENBQUMsQ0FBQyxNQUFtQjtRQUN6QixNQUFNLE1BQU0sR0FBRyxJQUFJLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFBO1FBQ25GLE1BQU0s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