import { Trackable, isTrackable, setParentIfTrackable, initializeValue, } from './trackable';
import { resolveEntryFromIterable, convertIterableToArray, } from './util';
class TrackableMap extends Trackable {
    constructor(entryIterableOrObject) {
        super();
        if (entryIterableOrObject) {
            const entryIterable = resolveEntryFromIterable(entryIterableOrObject);
            this.internalMap = new Map();
            for (let [key, value] of entryIterable) {
                value = initializeValue(value, this);
                this.internalMap.set(key, value);
            }
        }
        else {
            this.internalMap = new Map();
        }
    }
    get size() {
        return this.internalMap.size;
    }
    [Symbol.iterator]() {
        return this.internalMap[Symbol.iterator]();
    }
    onChildChange(child) {
        this.markAsChanged();
    }
    has(key) {
        return this.internalMap.has(key);
    }
    get(key, defaultValue) {
        if (!this.internalMap.has(key)) {
            return defaultValue;
        }
        return this.internalMap.get(key);
    }
    set(key, newValue) {
        const previousValue = this.internalMap.get(key);
        if (previousValue !== newValue) {
            this.markAsChanged();
            this.internalMap.set(key, newValue);
            setParentIfTrackable(newValue, this);
        }
        return this;
    }
    delete(key) {
        if (this.internalMap.has(key)) {
            this.markAsChanged();
            this.internalMap.delete(key);
        }
        return this;
    }
    update(key, mutator, defaultValue) {
        const value = this.get(key, defaultValue);
        this.set(key, mutator(value));
        return this;
    }
    merge(partial) {
        const entries = resolveEntryFromIterable(partial);
        for (const [key, value] of entries) {
            this.set(key, value);
        }
        return this;
    }
    clear() {
        if (this.internalMap.size > 0) {
            this.internalMap = new Map();
            this.markAsChanged();
        }
    }
    entries() {
        return this.internalMap.entries();
    }
    toEntryArray() {
        return convertIterableToArray(this.entries());
    }
    keys() {
        return this.internalMap.keys();
    }
    toKeyArray() {
        return convertIterableToArray(this.keys());
    }
    values() {
        return this.internalMap.values();
    }
    toValueArray() {
        return convertIterableToArray(this.values());
    }
    mapToArray(callback) {
        const array = [];
        for (const [key, value] of this.internalMap.entries()) {
            array.push(callback(value, key));
        }
        return array;
    }
    map(callback) {
        const newMap = new TrackableMap();
        for (const [key, value] of this.internalMap.entries()) {
            newMap.set(key, callback(value, key));
        }
        newMap.$trackable.isChanged = false;
        return newMap;
    }
    filter(callback) {
        const newMap = new TrackableMap();
        for (const [key, value] of this.internalMap.entries()) {
            if (callback(value, key)) {
                newMap.set(key, value);
            }
        }
        newMap.$trackable.isChanged = false;
        return newMap;
    }
    clone() {
        return new TrackableMap(this);
    }
    toJS(shallow = false) {
        const pureObject = {};
        for (const [key, value] of this) {
            pureObject[key] = !shallow && isTrackable(value)
                ? value.toJS()
                : value;
        }
        return pureObject;
    }
}
export default TrackableMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsb0JBQW9CLEVBQ3BCLGVBQWUsR0FDaEIsTUFBTSxhQUFhLENBQUE7QUFDcEIsT0FBTyxFQUNMLHdCQUF3QixFQUN4QixzQkFBc0IsR0FDdkIsTUFBTSxRQUFRLENBQUE7QUFFZixrQkFBd0MsU0FBUSxTQUE2QjtJQU8zRSxZQUFhLHFCQUE2RDtRQUN4RSxLQUFLLEVBQUUsQ0FBQTtRQUNQLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLGFBQWEsR0FBRyx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1lBRXJFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtZQUM1QixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZDLEtBQUssR0FBRyxlQUFlLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFBO2dCQUNwQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFDbEMsQ0FBQztRQUNILENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUM5QixDQUFDO0lBQ0gsQ0FBQztJQWpCRCxJQUFXLElBQUk7UUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUE7SUFDOUIsQ0FBQztJQWlCTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUE7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