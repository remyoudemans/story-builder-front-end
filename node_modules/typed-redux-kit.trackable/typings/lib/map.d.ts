import { Trackable } from './trackable';
declare class TrackableMap<K extends string, V> extends Trackable<TrackableMap<K, V>> {
    private internalMap;
    readonly size: number;
    constructor(entryIterableOrObject?: Iterable<[K, V]> | {
        [key: string]: V;
    });
    [Symbol.iterator](): IterableIterator<[K, V]>;
    onChildChange(child: V): void;
    has(key: K): boolean;
    get(key: K, defaultValue?: V): V;
    set(key: K, newValue: V): this;
    delete(key: K): this;
    update(key: K, mutator: (value: V) => V, defaultValue?: V): this;
    merge(partial: Iterable<[K, V]> | {
        [key: string]: V;
    }): this;
    clear(): void;
    entries(): IterableIterator<[K, V]>;
    toEntryArray(): [K, V][];
    keys(): IterableIterator<K>;
    toKeyArray(): K[];
    values(): IterableIterator<V>;
    toValueArray(): V[];
    mapToArray<R>(callback: (item: V, index: K) => R): R[];
    map<R>(callback: (item: V, index: K) => R): TrackableMap<K, R>;
    filter(callback: (item: V, index: K) => boolean): TrackableMap<K, V>;
    clone(): TrackableMap<K, V>;
    toJS(shallow?: boolean): {
        [key: string]: V;
    };
}
export default TrackableMap;
