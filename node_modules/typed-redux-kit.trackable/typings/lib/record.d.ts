import { Trackable } from './trackable';
export declare type TrackableRecord<T> = T & TrackableRecordClass<T>;
export declare const TrackableRecord: <T extends {}>(defaultValue: T) => (object?: Partial<T>) => TrackableRecord<T>;
export declare class TrackableRecordClass<T> extends Trackable<TrackableRecord<T>> {
    protected internalObject: T;
    constructor(entryIterableOrObject?: Iterable<[keyof T, T[keyof T]]> | T);
    [Symbol.iterator](): IterableIterator<[string, any]>;
    onChildChange(child: any): void;
    get<K extends keyof T>(key: K, defaultValue?: T[K]): T[K];
    set<K extends keyof T>(key: K, newValue: T[K]): this;
    delete<K extends keyof T>(key: K): this;
    update<K extends keyof T>(key: K, mutator: (value: T[K]) => T[K]): this;
    merge<K extends keyof T>(partial: Iterable<[K, T[K]]> | Partial<T>): this;
    clone(): TrackableRecord<T>;
    toJS<K extends keyof T>(shallow?: boolean): T;
}
export default TrackableRecord;
