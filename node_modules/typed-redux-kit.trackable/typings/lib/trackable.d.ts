export interface TrackableProperties {
    parent?: Trackable<any>;
    isChanged: boolean;
    shallow: boolean;
}
export declare const isTrackable: (maybeTrackable: any) => boolean;
export declare const setParentIfTrackable: (maybeTrackable: any, parent: Trackable<any>) => void;
export declare const initializeValue: <V>(maybeTrackable: V, parent: Trackable<any>) => V;
export declare abstract class Trackable<T> {
    $trackable: TrackableProperties;
    abstract clone(): T;
    abstract onChildChange(child: any): void;
    abstract toJS(): any;
    markAsChanged(): void;
    setParent(parent: Trackable<any>): void;
}
