"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const trackable_1 = require("./trackable");
const util_1 = require("./util");
class TrackableMap extends trackable_1.Trackable {
    constructor(entryIterableOrObject) {
        super();
        if (entryIterableOrObject) {
            const entryIterable = util_1.resolveEntryFromIterable(entryIterableOrObject);
            this.internalMap = new Map();
            for (let [key, value] of entryIterable) {
                value = trackable_1.initializeValue(value, this);
                this.internalMap.set(key, value);
            }
        }
        else {
            this.internalMap = new Map();
        }
    }
    get size() {
        return this.internalMap.size;
    }
    [Symbol.iterator]() {
        return this.internalMap[Symbol.iterator]();
    }
    onChildChange(child) {
        this.markAsChanged();
    }
    has(key) {
        return this.internalMap.has(key);
    }
    get(key, defaultValue) {
        if (!this.internalMap.has(key)) {
            return defaultValue;
        }
        return this.internalMap.get(key);
    }
    set(key, newValue) {
        const previousValue = this.internalMap.get(key);
        if (previousValue !== newValue) {
            this.markAsChanged();
            this.internalMap.set(key, newValue);
            trackable_1.setParentIfTrackable(newValue, this);
        }
        return this;
    }
    delete(key) {
        if (this.internalMap.has(key)) {
            this.markAsChanged();
            this.internalMap.delete(key);
        }
        return this;
    }
    update(key, mutator, defaultValue) {
        const value = this.get(key, defaultValue);
        this.set(key, mutator(value));
        return this;
    }
    merge(partial) {
        const entries = util_1.resolveEntryFromIterable(partial);
        for (const [key, value] of entries) {
            this.set(key, value);
        }
        return this;
    }
    clear() {
        if (this.internalMap.size > 0) {
            this.internalMap = new Map();
            this.markAsChanged();
        }
    }
    entries() {
        return this.internalMap.entries();
    }
    toEntryArray() {
        return util_1.convertIterableToArray(this.entries());
    }
    keys() {
        return this.internalMap.keys();
    }
    toKeyArray() {
        return util_1.convertIterableToArray(this.keys());
    }
    values() {
        return this.internalMap.values();
    }
    toValueArray() {
        return util_1.convertIterableToArray(this.values());
    }
    mapToArray(callback) {
        const array = [];
        for (const [key, value] of this.internalMap.entries()) {
            array.push(callback(value, key));
        }
        return array;
    }
    map(callback) {
        const newMap = new TrackableMap();
        for (const [key, value] of this.internalMap.entries()) {
            newMap.set(key, callback(value, key));
        }
        newMap.$trackable.isChanged = false;
        return newMap;
    }
    filter(callback) {
        const newMap = new TrackableMap();
        for (const [key, value] of this.internalMap.entries()) {
            if (callback(value, key)) {
                newMap.set(key, value);
            }
        }
        newMap.$trackable.isChanged = false;
        return newMap;
    }
    clone() {
        return new TrackableMap(this);
    }
    toJS(shallow = false) {
        const pureObject = {};
        for (const [key, value] of this) {
            pureObject[key] = !shallow && trackable_1.isTrackable(value)
                ? value.toJS()
                : value;
        }
        return pureObject;
    }
}
exports.default = TrackableMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FLb0I7QUFDcEIsaUNBR2U7QUFFZixrQkFBd0MsU0FBUSxxQkFBNkI7SUFPM0UsWUFBYSxxQkFBNkQ7UUFDeEUsS0FBSyxFQUFFLENBQUE7UUFDUCxFQUFFLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7WUFDMUIsTUFBTSxhQUFhLEdBQUcsK0JBQXdCLENBQUMscUJBQXFCLENBQUMsQ0FBQTtZQUVyRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7WUFDNUIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxLQUFLLEdBQUcsMkJBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7Z0JBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTtZQUNsQyxDQUFDO1FBQ0gsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO1FBQzlCLENBQUM7SUFDSCxDQUFDO0lBakJELElBQVcsSUFBSTtRQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQTtJQUM5QixDQUFDO0lBaUJNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQTtJQUM1QyxDQUFDO0lBRU0sYUFBYSxDQUFFLEtBQVE7UUFDNUIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ3RCLENBQUM7SUFFTSxHQUFHLENBQUUsR0FBTTtRQUNoQixNQUFN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