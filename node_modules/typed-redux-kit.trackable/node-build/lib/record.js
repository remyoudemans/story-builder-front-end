"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const trackable_1 = require("./trackable");
const util_1 = require("./util");
exports.TrackableRecord = (defaultValue) => {
    class ExtendedTrackableRecord extends TrackableRecordClass {
        clone() {
            return new ExtendedTrackableRecord(Object.assign({}, defaultValue, this.internalObject));
        }
    }
    const keys = Object.keys(defaultValue);
    keys.forEach(key => {
        Object.defineProperty(ExtendedTrackableRecord.prototype, key, {
            set(newValue) {
                this.set(key, newValue);
            },
            get() {
                return this.get(key);
            },
        });
    });
    return (object) => {
        const record = new ExtendedTrackableRecord(Object.assign({}, defaultValue, object));
        return record;
    };
};
class TrackableRecordClass extends trackable_1.Trackable {
    constructor(entryIterableOrObject) {
        super();
        if (entryIterableOrObject) {
            const entryIterable = util_1.resolveEntryFromIterable(entryIterableOrObject);
            this.internalObject = {};
            for (let [key, value] of entryIterable) {
                value = trackable_1.initializeValue(value, this);
                this.internalObject[key] = value;
            }
        }
        else {
            this.internalObject = {};
        }
    }
    [Symbol.iterator]() {
        const entries = util_1.getEntries(this.internalObject);
        return entries[Symbol.iterator]();
    }
    onChildChange(child) {
        this.markAsChanged();
    }
    get(key, defaultValue) {
        if (this.internalObject[key] === undefined)
            return defaultValue;
        return this.internalObject[key];
    }
    set(key, newValue) {
        const previousValue = this.internalObject[key];
        if (previousValue !== newValue) {
            this.markAsChanged();
            this.internalObject[key] = newValue;
            if (trackable_1.isTrackable(newValue)) {
                trackable_1.setParentIfTrackable(newValue, this);
            }
        }
        return this;
    }
    delete(key) {
        if (this.internalObject[key] !== undefined) {
            this.markAsChanged();
            this.internalObject[key] = undefined;
        }
        return this;
    }
    update(key, mutator) {
        const value = this.get(key);
        this.set(key, mutator(value));
        return this;
    }
    merge(partial) {
        const entries = util_1.resolveEntryFromIterable(partial);
        for (const [key, value] of entries) {
            this.set(key, value);
        }
        return this;
    }
    clone() {
        return new TrackableRecordClass(this.internalObject);
    }
    toJS(shallow = false) {
        const pureObject = {};
        for (const [key, value] of this) {
            pureObject[key] = !shallow && trackable_1.isTrackable(value)
                ? value.toJS()
                : value;
        }
        return pureObject;
    }
}
exports.TrackableRecordClass = TrackableRecordClass;
exports.default = exports.TrackableRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9yZWNvcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FLb0I7QUFDcEIsaUNBR2U7QUFHRixRQUFBLGVBQWUsR0FBRyxDQUFlLFlBQWU7SUFDM0QsNkJBQThCLFNBQVEsb0JBQXVCO1FBQ3BELEtBQUs7WUFDVixNQUFNLENBQUMsSUFBSSx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUF1QixDQUFBO1FBQ2hILENBQUM7S0FDRjtJQUVELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHO1FBQ2QsTUFBTSxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1lBQzVELEdBQUcsQ0FBRSxRQUFRO2dCQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1lBQ3pCLENBQUM7WUFDRCxHQUFHO2dCQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ3RCLENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtJQUVGLE1BQU0sQ0FBQyxDQUFDLE1BQW1CO1FBQ3pCLE1BQU0sTUFBTSxHQUFHLElBQUksdUJBQXVCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7UUFDbkYsTUFBTSxDQUFDLE1BQTRCLENBQUE7SUFDckMsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsMEJBQXFDLFNBQVEscUJBQTZCO0lBR3hFLFlBQWEscUJBQTJEO1FBQ3RFLEtBQUssRUFBRSxDQUFBO1FB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