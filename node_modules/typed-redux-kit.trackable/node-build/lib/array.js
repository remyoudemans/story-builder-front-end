"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const trackable_1 = require("./trackable");
const util_1 = require("./util");
let OBSERVABLE_ARRAY_BUFFER_SIZE = 0;
exports.TrackableArray = (iterable) => {
    const record = new TrackableArrayClass(iterable);
    return record;
};
class TrackableArrayClass extends trackable_1.Trackable {
    constructor(iterable) {
        super();
        if (iterable && iterable[Symbol.iterator]) {
            this.internalArray = [];
            let index = 0;
            for (let value of iterable) {
                value = trackable_1.initializeValue(value, this);
                this.internalArray.push(value);
                index++;
            }
            this.reserveArrayBufferOnDemand();
        }
        else {
            this.internalArray = [];
        }
    }
    get length() {
        return this.internalArray.length;
    }
    [Symbol.iterator]() {
        const entries = util_1.getEntries(this.internalArray);
        return entries[Symbol.iterator]();
    }
    /**
     * Modifier
     */
    set(index, newValue) {
        const previousValue = this.internalArray[index];
        if (previousValue !== newValue) {
            this.markAsChanged();
            this.internalArray[index] = newValue;
            trackable_1.setParentIfTrackable(newValue, this);
            this.reserveArrayBufferOnDemand();
        }
        return this;
    }
    push(...newValues) {
        if (newValues.length > 0) {
            this.internalArray.push(...newValues);
            this.markAsChanged();
            for (const newValue of newValues) {
                trackable_1.setParentIfTrackable(newValue, this);
            }
            this.reserveArrayBufferOnDemand();
        }
        return this.internalArray.length;
    }
    pop() {
        let value;
        if (this.internalArray.length > 0) {
            value = this.internalArray.pop();
            this.markAsChanged();
            this.reserveArrayBufferOnDemand();
        }
        return value;
    }
    unshift(...newValues) {
        if (newValues.length > 0) {
            this.internalArray.unshift(...newValues);
            this.markAsChanged();
            for (const newValue of newValues) {
                trackable_1.setParentIfTrackable(newValue, this);
            }
            this.reserveArrayBufferOnDemand();
        }
        return this.internalArray.length;
    }
    shift() {
        let value;
        if (this.internalArray.length > 0) {
            value = this.internalArray.shift();
            this.markAsChanged();
            this.reserveArrayBufferOnDemand();
        }
        return value;
    }
    splice(start, deleteCount, ...items) {
        for (const item of items) {
            trackable_1.setParentIfTrackable(item, this);
        }
        const deleted = this.internalArray.splice(start, deleteCount, ...items);
        if (deleteCount > 0 || items.length > 0) {
            this.markAsChanged();
            this.reserveArrayBufferOnDemand();
        }
        return deleted;
    }
    copyWithin(target, start, end) {
        if (target !== 0 || start !== 0) {
            this.internalArray.copyWithin(target, start, end);
            this.markAsChanged();
        }
        return this;
    }
    fill(value, start, end) {
        if (this.internalArray.length > 0) {
            trackable_1.setParentIfTrackable(value, this);
            this.internalArray.fill(value, start, end);
            this.markAsChanged();
        }
        return this;
    }
    reverse() {
        if (this.internalArray.length > 0) {
            this.internalArray.reverse();
            this.markAsChanged();
        }
        return this;
    }
    sort(compare) {
        if (this.internalArray.length > 0) {
            this.internalArray.sort(compare);
            this.markAsChanged();
        }
        return this;
    }
    /**
     * Selectors
     */
    get(index, defaultValue) {
        if (this.internalArray[index] === undefined)
            return defaultValue;
        return this.internalArray[index];
    }
    slice(start, end) {
        return this.internalArray.slice(start, end);
    }
    concat(...arrays) {
        return this.internalArray.concat(...arrays.map((array) => array.$trackable
            ? array.slice()
            : array));
    }
    entries() {
        return this.internalArray.entries();
    }
    every(callback, thisArg) {
        return this.internalArray.every(callback, thisArg);
    }
    filter(callback, thisArg) {
        return this.internalArray.filter(callback, thisArg);
    }
    find(predicate, thisArg) {
        return this.internalArray.find(predicate, thisArg);
    }
    findIndex(predicate, thisArg) {
        return this.internalArray.findIndex(predicate, thisArg);
    }
    includes(searchElement, fromIndex) {
        return this.internalArray.includes(searchElement, fromIndex);
    }
    indexOf(searchElement, fromIndex) {
        return this.internalArray.indexOf(searchElement, fromIndex);
    }
    join(seperator) {
        return this.internalArray.join(seperator);
    }
    keys() {
        return this.internalArray.keys();
    }
    lastIndexOf(searchElement, fromIndex) {
        return this.internalArray.lastIndexOf(searchElement, fromIndex);
    }
    map(callback, thisArg) {
        return this.internalArray.map(callback, thisArg);
    }
    reduce(callback, initialValue) {
        return this.internalArray.reduce(callback, initialValue);
    }
    reduceRight(callback, initialValue) {
        return this.internalArray.reduceRight(callback, initialValue);
    }
    some(callback, thisArg) {
        return this.internalArray.some(callback, thisArg);
    }
    toLocaleString() {
        return this.internalArray.toLocaleString();
    }
    toString() {
        return this.internalArray.toString();
    }
    values() {
        return this.internalArray.values();
    }
    /**
     * Trackable Specifics
     */
    onChildChange(child) {
        this.markAsChanged();
    }
    clone() {
        return exports.TrackableArray(this.internalArray);
    }
    toJS(shallow = false) {
        const pureArray = [];
        for (let [index, value] of this) {
            value = !shallow && trackable_1.isTrackable(value)
                ? value.toJS()
                : value;
            pureArray.push(value);
        }
        return pureArray;
    }
    reserveArrayBufferOnDemand() {
        if (this.internalArray.length > OBSERVABLE_ARRAY_BUFFER_SIZE) {
            reserveArrayBuffer(this.internalArray.length);
        }
    }
}
exports.TrackableArrayClass = TrackableArrayClass;
function createArrayBufferItem(index) {
    Object.defineProperty(TrackableArrayClass.prototype, '' + index, {
        enumerable: false,
        configurable: false,
        get() {
            return this.get(index);
        },
        set(value) {
            this.set(index, value);
        },
    });
}
function reserveArrayBuffer(max) {
    for (let index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max; index++) {
        createArrayBufferItem(index);
    }
    OBSERVABLE_ARRAY_BUFFER_SIZE = max;
}
reserveArrayBuffer(1000);
exports.default = exports.TrackableArray;
//# sourceMappingURL=data:application/json;base64,